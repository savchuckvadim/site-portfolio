import { AppDispatch, AppGetState } from "@/modules/app/model/store";
import { aiAPI } from "../../AI";
import { API_METHOD } from "../../AI/api/ai-api";
import { chatActions } from "./ChatSlice";


// export const getAnswer = (message: string) =>
// async (dispatch: AppDispatch, getState: AppGetState) => {

//     
//     const result = await aiAPI.service('', API_METHOD.POST,
//         '',
//         {
//             prompt: message,
//             model: "mistral"
//         })
//     

// }
// let eventSource: EventSource | null = null;
// export const getAnswer = (message: string) =>
//     async (dispatch: AppDispatch, getState: AppGetState) => {
//         try {
//             // dispatch(setLoading(true)); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏

//             //     const eventSource = new EventSource("http://localhost:8000/api/generate");

//             //     eventSource.onmessage = (event) => {
//             //         const data = JSON.parse(event.data); // –ü–∞—Ä—Å–∏–º JSON
//             //         console.log("üî• –ù–æ–≤—ã–π chunk:", data.message);

//             //         // dispatch(addMessage({ role: "assistant", text: data.message })); // –î–∏—Å–ø–∞—Ç—á–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
//             //     };

//             //     eventSource.onerror = (error) => {
//             //         console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞:", error);
//             //         eventSource.close();

//             //         // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
//             //         setTimeout(() => {
//             //             console.log("‚ôªÔ∏è –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º EventSource...");
//             //             dispatch(getAnswer(message));
//             //         }, 2000);
//             //     };

//             // } catch (error) {
//             //     console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
//             //     // dispatch(setError("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É"));
//             // }

//             if (eventSource) {
//                 console.log("üü° EventSource —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π");
//                 return;
//             }

//             eventSource = new EventSource("http://localhost:8000/api/generate");

//             eventSource.onmessage = (event) => {
//                 if (event.data === "{}") return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º ping-—Å–æ–æ–±—â–µ–Ω–∏—è

//                 try {
//                     const data = JSON.parse(event.data);
//                     console.log("üî• –ù–æ–≤—ã–π chunk:", data.message);
//                     // dispatch(addMessage({ role: "assistant", text: data.message }));
//                 } catch (e) {
//                     console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", e);
//                 }
//             };

//             // **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞**
//             eventSource.addEventListener("done", () => {
//                 console.log("‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω");
//                 eventSource?.close();
//                 eventSource = null; // **–û—á–∏—â–∞–µ–º –æ–±—ä–µ–∫—Ç**
//             });

//             eventSource.onerror = (error) => {
//                 console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞:", error);
//                 eventSource?.close();
//                 eventSource = null; // **–°–±—Ä–∞—Å—ã–≤–∞–µ–º**
//                 //@ts-ignore
//                 if (error?.target?.readyState === EventSource.CLOSED) {
//                     console.log("‚ôªÔ∏è –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º EventSource...");
//                     setTimeout(() => dispatch(getAnswer(message)), 2000);
//                 }
//             };
//         } catch (e) {
//             console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", e);
//         }

//     };
export const getAnswer = (message: string) =>
    async (dispatch: AppDispatch, getState: AppGetState) => {
        try {
            // console.log("üü° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É...");
            dispatch(
                chatActions.setIsLoading({ status: true })
            )
            const response = await fetch("https://april-online.ru/api/ollama", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Accept: "text/event-stream",
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-API-KEY': 'e0336d3b27299e405a344d2475627c5810eab829a4e5c1214e452e20519d5984'
                },
                body: JSON.stringify({ prompt: message, model: "mistral" }),
            });

            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${response.status}`);

            const reader = response.body?.getReader();
            if (!reader) throw new Error("–û—à–∏–±–∫–∞: response.body –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");

            const decoder = new TextDecoder();
            let buffer = "";
            dispatch(
                chatActions.setIsStreaming({ status: true })
            )
            while (true) {

                const { done, value } = await reader.read();
                if (done) break;

                buffer += decoder.decode(value, { stream: true });

                // –†–∞–∑–±–∏—Ä–∞–µ–º —á–∞–Ω–∫–∏, —Ä–∞–∑–±–∏—Ç—ã–µ –ø–æ `\n\n`
                let parts = buffer.split("\n\n");
                buffer = parts.pop() || ""; // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —á–∞–Ω–∫

                for (let chunk of parts) {
                    chunk = chunk.trim(); // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫

                    if (!chunk.startsWith("data: ")) continue; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —á–∞–Ω–∫–∏

                    try {
                        const jsonString = chunk.replace("data: ", "").trim();
                        if (!jsonString) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —á–∞–Ω–∫–∏

                        const json = JSON.parse(jsonString);
                        if (json.message) {
                            // console.log("–ù–æ–≤—ã–π chunk:", json.message);
                            dispatch(
                                chatActions.setCurrentAnswerChunk({ chunk: json.message })
                            )
                        }
                    } catch (e) {
                        // console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", e, chunk);
                    }
                }
            }
            dispatch(
                chatActions.setIsStreaming({ status: false })
            )
            dispatch(
                chatActions.setIsLoading({ status: false })
            )
            console.log("‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω");

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
        }
    };
